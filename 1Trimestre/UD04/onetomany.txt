@Entity
@Table(name = "libros")
public class Libro {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "titulo")
    @NotBlank(message = "El título no puede estar vacío") // Asegura que el título no sea null o esté vacío
    @Size(min=2, max = 200, message = "El título debe tener entre 2 y 200 caracteres") // Limita la longitud del título
    private String titulo;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "autor_id")
    @NotNull(message = "El autor es obligatorio") // Asegura que el libro tenga un autor asociado
    private Autor autor;
    
    @Enumerated(EnumType.STRING)
    @NotNull(message = "La categoria es obligatoria")
    @Column(name = "categoria", nullable = false) // Especifica detalles de la columna "estado"
    private Categoria categoria;

    ---------------------

    
@Entity
@Table(name = "autores")
public class Autor {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "nombre")
    @NotBlank(message = "El nombre no puede estar vacío") // Asegura que el nombre no sea null o esté vacío
    @Size(min=1, max = 25, message = "Un mínimo de 1 y máximo de 25 caracteres") // Limita la longitud del nombre
    private String nombre;

    @OneToMany(mappedBy = "autor", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Libro> libros = new ArrayList<>();
    // Getters y setters
    public Long getId() {
        return id;
    }